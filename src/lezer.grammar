@top Grammar { 
  (Top | Rule | Skip | Precedence | Tokens | Comment | DetectDelim | Dialects | external)+
}

Top {
  "@top" Rule
}

DetectDelim {
  "@detectDelim"
}

Dialects {
  "@dialects" "{" Identifier (","? Identifier)* "}"
}

external {
  ExternalTokens | ExternalGrammar | ExternalProp | ExternalSpecialize | ExternalExtend
}

ExternalTokens {
  "@external" "tokens" Identifier "from" LiteralString "{" ExternalToken (","? ExternalToken)* "}"
}

ExternalToken {
  Identifier NodeProp?
}

ExternalGrammar {
  "@external" "grammar" Identifier "from" LiteralString |
  "@external" "grammar" Identifier "as" Identifier "from" LiteralString
}

ExternalProp {
  "@external" "prop" Identifier "from" LiteralString
}

ExternalSpecialize {
  "@external" "specialize" "{" Identifier "}" Identifier "from" LiteralString "{" ExternalToken ("," ExternalToken)* "}"
}

ExternalExtend {
  "@external" "extend" "{" Identifier "}" Identifier "from" LiteralString "{" ExternalToken ("," ExternalToken)* "}"
}

Skip {
  "@skip" "{" MainSkip? "}" |
  "@skip" "{" MainSkip? "}" "{" ScopedSkip "}"
}

MainSkip {
  ruleExpr
}

ScopedSkip {
  RuleSimple*
}

Precedence {
  "@precedence" "{" PrecedenceItem (","? PrecedenceItem)* "}"
}

PrecedenceItem {
  Identifier PrecedenceItemModifier?
}

PrecedenceItemModifier {
  "@cut" | "@left" | "@right"
}

Tokens {
  "@tokens" "{" tokenRule+ "}"
}

tokenRule {
  Rule | TokenPrecedence | LiteralToken
}

LiteralToken {
  LiteralString NodeProp? |
  LiteralRegexp NodeProp?
}

TokenPrecedence {
  "@precedence" "{" tokenPrecedenceItem (","? tokenPrecedenceItem)* "}"
}

TokenConflict {
  "@conflict" "{" tokenPrecedenceItem (","? tokenPrecedenceItem)* "}"
}

tokenPrecedenceItem {
  LiteralString | LiteralString | Identifier | TemplateInstance
}

Rule { 
  Identifier NodeProp? TemplateArguments? "{" ruleExpr "}"
}

RuleSimple {
  Identifier NodeProp? "{" ruleExpr "}"
}

ruleExpr {
  ChoiceExpr | Sequence
}

ChoiceExpr {
  Sequence ( "|" Sequence )+
}

Sequence {
  ( element | repeat )+
}

Negate {
  "!" element
}

RepeatPlus {
  element "+"
}

RepeatAst {
  element "*"
}

RepeatOpt {
  element "?"
}

repeat {
  Negate | RepeatPlus | RepeatAst | RepeatOpt
}

element {
  Identifier | TemplateInstance | LiteralString | LiteralRegexp | Specialize | Extend | RuleSimple | "(" ruleExpr ")"
}

Specialize {
  "@specialize" NodeProp? TemplateInstanceArguments
}

Extend {
  "@extend" NodeProp? TemplateInstanceArguments
}

TemplateInstance {
  Identifier TemplateInstanceArguments
}

TemplateArguments {
  "<" Identifier ("," Identifier)* ">"
}

TemplateInstanceArguments {
  "<" templateInstanceArguments ("," templateInstanceArguments)* ">"
}

templateInstanceArguments {
  Sequence | ChoiceExpr | 
}

NodeProp {
  "[" PropName ("=" PropValue)? "]"
}

PropName {
  identifier | at_keyword
}

PropValue {
  "{" identifier "}" | propValue | LiteralString
}

Identifier {
  identifier
}

LiteralString {
  dq_string | sq_string
}

LiteralRegexp {
  regexp
}

@tokens {
  propValue {
    $[a-zA-Z0-9]+
  }
  identifier {
    $[a-zA-Z_] $[a-zA-Z0-9_.]*
  }
  at_keyword {
    "@" $[a-zA-Z_] $[a-zA-Z0-9_]*
  }
  regexp { "$[" reg_char+ "]" | "![" reg_char+ "]" }
  reg_char { $[\u{20}-\u{5c}\u{5e}-\u{10ffff}] | "\\" esc | "\\]" }
  dq_string { '"' dq_char* '"' }
  dq_char { $[\u{20}\u{21}\u{23}-\u{5b}\u{5d}-\u{10ffff}] | "\\" esc }
  sq_string { "'" sq_char* "'" }
  sq_char { $[\u{20}-\u{26}\u{28}-\u{5b}\u{5d}-\u{10ffff}] | "\\" esc }
  esc { $["\\bfnrtu] }
  whitespace { $[ \n\r\t] }
  Comment { "//" ![\n]* }
//  Any { "_" }
}

@skip { whitespace }
